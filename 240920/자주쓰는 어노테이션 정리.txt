@Component는 **일반적인 스프링 빈(bean)**을 나타냅니다. 
Spring IoC 컨테이너가 자동으로 관리하는 객체를 정의할 때 사용합니다. 
개발자가 수동으로 객체를 관리할 필요 없이 Spring이 객체를 자동으로 생성하고 관리합니다.

@Service는 서비스 계층에서 사용하는 빈을 정의할 때 사용합니다. 
내부적으로 @Component와 동일한 기능을 하지만, 서비스 클래스임을 명시적으로 나타내기 위해 사용합니다. 
주로 비즈니스 로직을 처리하는 클래스에 사용됩니다.

@Repository는 데이터 접근 계층에서 사용하는 빈을 정의할 때 사용합니다. 
@Service처럼 기능적으로는 @Component와 동일하지만, 데이터베이스 접근을 위한 클래스임을 명시합니다. 
또한, Spring에서 자동으로 예외를 처리하고 변환하는 기능이 포함되어 있습니다.

@Controller는 웹 계층에서 요청을 처리하고 클라이언트에게 응답을 반환하는 컨트롤러를 정의할 때 사용합니다.
주로 Spring MVC 애플리케이션에서 사용됩니다. 
클라이언트의 요청을 처리하고 데이터를 반환하는 역할을 합니다.

@RestController는 @Controller와 동일하지만, RESTful 웹 서비스를 개발할 때 사용됩니다.
@ResponseBody를 생략하고, 메서드가 반환하는 값을 JSON 또는 XML 형식으로 
자동 변환하여 클라이언트에게 반환합니다.

@Autowired는 의존성 주입을 위한 어노테이션입니다. 
필드, 생성자, 또는 메서드에 주입할 객체를 자동으로 주입합니다. 
Spring 컨테이너에서 필요한 객체를 찾아서 자동으로 주입합니다

@Autowired와 함께 사용되어 여러 빈 중에서 특정 빈을 선택할 수 있도록 합니다. 
같은 타입의 빈이 여러 개일 때 어떤 빈을 주입할지 명확하게 지정해 줍니다.

@Configuration은 스프링 설정 클래스를 나타냅니다. 
Spring의 설정 파일로 사용되어 빈을 정의하고 Spring IoC 컨테이너가 관리할 빈을 등록합니다. 
주로 자바 기반의 설정 파일을 작성할 때 사용됩니다.

@Bean은 수동으로 빈을 등록할 때 사용하는 어노테이션입니다. 
주로 @Configuration 클래스 안에서 정의되며, 특정 객체를 Spring 컨테이너에 빈으로 등록합니다.